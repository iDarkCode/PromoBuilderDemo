using FastEndpoints; using FastEndpoints.Swagger; using MediatR; using Microsoft.EntityFrameworkCore; using PromoEngine.Application; using PromoEngine.Infrastructure.Authoring; using PromoEngine.Infrastructure.Cache; using PromoEngine.Infrastructure.EF; using PromoEngine.Infrastructure.Repositories; using PromoEngine.Infrastructure.Runtime; using StackExchange.Redis;
var builder=WebApplication.CreateBuilder(args);
builder.Services.AddDbContext<PromoEngineDbContext>(o=> o.UseNpgsql(builder.Configuration.GetConnectionString("Postgres") ?? "Host=localhost;Database=promoengine;Username=postgres;Password=postgres"));
builder.Services.AddSingleton<IConnectionMultiplexer>(_=> ConnectionMultiplexer.Connect(builder.Configuration.GetConnectionString("Redis") ?? "localhost:6379"));
builder.Services.AddMediatR(cfg=> cfg.RegisterServicesFromAssembly(typeof(Program).Assembly));
builder.Services.AddScoped<IPromotionProvider, RedisPromotionProvider>();
builder.Services.AddScoped<IRuleEngineService, RuleEngineService>();
builder.Services.AddScoped<IRewardGrantService, RewardGrantService>();
builder.Services.AddScoped<ISegmentService, SegmentsDataverseMock>();
builder.Services.AddScoped<IAttributesService, AttributesService>();
builder.Services.AddScoped<IPromotionCache, PromotionCacheRedis>();
builder.Services.AddScoped<IPromotionCompiler, RulesEngineCompiler>();
builder.Services.AddScoped<IPromotionPublisher, PromotionPublisherMock>();
builder.Services.AddScoped<IRuleTierRepository, RuleTierRepository>();
builder.Services.AddScoped<IExpressionGroupRepository, ExpressionGroupRepository>();
builder.Services.AddScoped<IPromotionRewardRepository, PromotionRewardRepository>();
builder.Services.AddScoped<IContactRewardRepository, ContactRewardRepository>();
builder.Services.AddFastEndpoints().SwaggerDocument(o=> o.DocumentSettings = s => s.Title = "PromoEngine Unified API");
var app=builder.Build(); app.UseFastEndpoints(); app.UseSwaggerGen(); app.Run();